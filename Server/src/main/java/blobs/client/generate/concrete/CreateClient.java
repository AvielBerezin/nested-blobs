package blobs.client.generate.concrete;

import blobs.client.generate.utils.ObjectDestruction;
import blobs.client.generate.utils.expression.*;
import blobs.client.generate.utils.expression.literal.ObjectLiteral;
import blobs.client.generate.utils.statement.ScopeStatement;
import blobs.client.generate.utils.statement.decleration.ImmutableDeclaration;

import java.io.IOException;
import java.util.function.BiFunction;

import static blobs.client.generate.utils.expression.Expression.identifier;
import static blobs.client.generate.utils.expression.Expression.literal;

public class CreateClient {
    public static void main(String[] args) throws IOException {
        ImmutableDeclaration canvasDeclaration =
                identifier("canvas").declareAs(Scope.create()
                                                    .addStatement(identifier("canvas").declareAs(identifier("document").get(identifier("createElement"))
                                                                                                                       .invoke()
                                                                                                                       .addArgument(Expression.literal("canvas"))))
                                                    .addStatement(identifier("document")
                                                                          .get(identifier("body"))
                                                                          .get(identifier("appendChild")).invoke()
                                                                          .addArgument(identifier("canvas")))
                                                    .addStatement(identifier("size").mutableDeclaration())
                                                    .addStatement(Assignment.of(identifier("size"), Expression.literal(0)))
                                                    .addStatement(identifier("adjustSize").declareAs(Function.create()
                                                                                                             .addStatement(Assignment.of(identifier("canvas").get(identifier("width")),
                                                                                                                                         identifier("window").get(identifier("innerWidth"))))
                                                                                                             .addStatement(Assignment.of(identifier("canvas").get(identifier("height")),
                                                                                                                                         identifier("window").get(identifier("innerHeight"))))
                                                                                                             .addStatement(Assignment.of(identifier("size"),
                                                                                                                                         identifier("Math").get(identifier("min")).invoke()
                                                                                                                                                           .addArgument(identifier("canvas").get(identifier("width")))
                                                                                                                                                           .addArgument(identifier("canvas").get(identifier("height")))))
                                                                                                             .conclude(identifier("udefined"))))
                                                    .addStatement(identifier("window").get(identifier("onresize")).assign(identifier("adjustSize"))
                                                                                      .statement())
                                                    .addStatement(identifier("adjustSize").invoke())
                                                    .conclude(identifier("canvas")));
        Invocation arcInvocation =
                identifier("context").get(identifier("arc"))
                                     .invoke()
                                     .addArgument(identifier("canvas").get(identifier("width"))
                                                                      .add(identifier("x").multiply(identifier("size")))
                                                                      .divide(Expression.literal(2)))
                                     .addArgument(identifier("canvas").get(identifier("height"))
                                                                      .add(identifier("y").multiply(identifier("size")))
                                                                      .divide(Expression.literal(2)))
                                     .addArgument(identifier("r").multiply(identifier("size").divide(Expression.literal(2))))
                                     .addArgument(Expression.literal(0))
                                     .addArgument(identifier("Math").get(identifier("PI")).multiply(Expression.literal(2)));
        ImmutableDeclaration alphaFunctionDeclaration =
                identifier("alpha").declareAs(Function.create()
                                                      .addParameter(identifier("blob"))
                                                      .conclude(identifier("Math").get(identifier("min"))
                                                                                  .invoke()
                                                                                  .addArgument(Expression.literal(1))
                                                                                  .addArgument(identifier("Math").get(identifier("max"))
                                                                                                                 .invoke()
                                                                                                                 .addArgument(Expression.literal(0.05))
                                                                                                                 .addArgument(identifier("linearMap").invoke()
                                                                                                                                                     .addArgument(identifier("radius").divide(Expression.literal(12)))
                                                                                                                                                     .addArgument(identifier("radius"))
                                                                                                                                                     .addArgument(identifier("blob").get(identifier("r")))
                                                                                                                                                     .addArgument(Expression.literal(0.6))
                                                                                                                                                     .addArgument(Expression.literal(0.2))))));
        BiFunction<String, Expression, Invocation> drawCircle = (whoToDraw, color) ->
                identifier("drawCircle").invoke()
                                        .addArgument(identifier(whoToDraw).get(identifier("x"))
                                                                          .divide(identifier("radius")))
                                        .addArgument(identifier(whoToDraw).get(identifier("y"))
                                                                          .divide(identifier("radius")))
                                        .addArgument(identifier(whoToDraw).get(identifier("r"))
                                                                          .divide(identifier("radius")))
                                        .addArgument(color)
                                        .addArgument(identifier("alpha").invoke().addArgument(identifier(whoToDraw)));
        Invocation invokeSendMovement = identifier("sendMovement").invoke()
                                                         .addArgument(identifier("x").subtract(identifier("canvas").get(identifier("width"))
                                                                                                                   .divide(literal(2)))
                                                                                     .multiply(literal(2))
                                                                                     .divide(identifier("size")))
                                                         .addArgument(identifier("y").subtract(identifier("canvas").get(identifier("height"))
                                                                                                                   .divide(literal(2)))
                                                                                     .multiply(literal(2))
                                                                                     .divide(identifier("size")));
        ScopeStatement.create()
                      .addStatement(canvasDeclaration)
                      .addStatement(identifier("context").declareAs(identifier("canvas").get(identifier("getContext"))
                                                                                        .invoke()
                                                                                        .addArgument(Expression.literal("2d"))))
                      .addStatement(identifier("drawCircle").declareAs(Function.create()
                                                                               .addParameter(identifier("x"))
                                                                               .addParameter(identifier("y"))
                                                                               .addParameter(identifier("r"))
                                                                               .addParameter(identifier("color"))
                                                                               .addParameter(identifier("alpha"))
                                                                               .addStatement(identifier("context").get(identifier("fillStyle")).assign(identifier("color")))
                                                                               .addStatement(identifier("context").get(identifier("globalAlpha")).assign(identifier("alpha")))
                                                                               .addStatement(identifier("context").get(identifier("beginPath")).invoke())
                                                                               .addStatement(arcInvocation)
                                                                               .addStatement(identifier("context").get(identifier("fill")).invoke())
                                                                               .addStatement(identifier("context").get(identifier("fillStyle")).assign(Expression.literal("black")))
                                                                               .addStatement(identifier("context").get(identifier("beginPath")).invoke())
                                                                               .addStatement(arcInvocation)
                                                                               .addStatement(identifier("context").get(identifier("stroke")).invoke())
                                                                               .conclude(identifier("undefined").returned())))
                      .addStatement(identifier("linearMap").declareAs(Function.create()
                                                                              .addParameter(identifier("x0"))
                                                                              .addParameter(identifier("x1"))
                                                                              .addParameter(identifier("x"))
                                                                              .addParameter(identifier("y0"))
                                                                              .addParameter(identifier("y1"))
                                                                              .addStatement(identifier("x0").equals(identifier("x1"))
                                                                                                            .ifStatement()
                                                                                                            .thenDo(identifier("y0")))
                                                                              .conclude(identifier("y0").add(identifier("y1").subtract(identifier("y0"))
                                                                                                                             .divide(identifier("x1").subtract(identifier("x0"))))
                                                                                                        .returned())))
                      .addStatement(identifier("socket").declareAs(identifier("WebSocket").construct()
                                                                                          .addArgument(Expression.literal("ws://localhost:81"))))
                      .addStatement(identifier("socket").get(identifier("onmessage"))
                                                        .assign(Function.create()
                                                                        .addParameter(identifier("event"))
                                                                        .addStatement(identifier("view").declareAs(identifier("JSON").get(identifier("parse"))
                                                                                                                                     .invoke()
                                                                                                                                     .addArgument(identifier("event").get(identifier("data")))))
                                                                        .addStatement(identifier("radius").declareAs(identifier("view").get(identifier("radius"))))
                                                                        .addStatement(identifier("player").declareAs(identifier("view").get(identifier("player"))))
                                                                        .addStatement(identifier("blobs").declareAs(identifier("view").get(identifier("blobs"))))
                                                                        .addStatement(identifier("context").get(identifier("clearRect"))
                                                                                                           .invoke()
                                                                                                           .addArgument(Expression.literal(0))
                                                                                                           .addArgument(Expression.literal(0))
                                                                                                           .addArgument(identifier("canvas").get(identifier("width")))
                                                                                                           .addArgument(identifier("canvas").get(identifier("height"))))
                                                                        .addStatement(alphaFunctionDeclaration)
                                                                        .addStatement(identifier("blobs").get(identifier("forEach"))
                                                                                                         .invoke()
                                                                                                         .addArgument(Function.create()
                                                                                                                              .addParameter(identifier("blob"))
                                                                                                                              .addStatement(drawCircle.apply("blob",
                                                                                                                                                             Scope.create()
                                                                                                                                                                  .conclude(identifier("blob").get(identifier("human"))
                                                                                                                                                                                              .ifStatement()
                                                                                                                                                                                              .thenDo(Expression.literal("red"))
                                                                                                                                                                                              .elseDo(Expression.literal("yellow")))))
                                                                                                                              .conclude(identifier("undefined"))))
                                                                        .addStatement(drawCircle.apply("player", Expression.literal("green")))
                                                                        .conclude(identifier("undefined"))))
                      .addStatement(identifier("moving").mutableDeclaration())
                      .addStatement(identifier("moving").assign(Expression.literal(false)))
                      .addStatement(identifier("sendMovement").declareAs(Function.create()
                                                                                 .addParameter(identifier("x"))
                                                                                 .addParameter(identifier("y"))
                                                                                 .addStatement(identifier("angle").declareAs(identifier("Math").get(identifier("atan"))
                                                                                                                                               .invoke()
                                                                                                                                               .addArgument(identifier("y").divide(identifier("x")))
                                                                                                                                               .add(identifier("x").lessThen(Expression.literal(0))
                                                                                                                                                                   .intoNum()
                                                                                                                                                                   .multiply(identifier("Math").get(identifier("PI"))))))
                                                                                 .addStatement(identifier("d").declareAs(identifier("Math").get(identifier("sqrt"))
                                                                                                                                           .invoke()
                                                                                                                                           .addArgument(identifier("x").multiply(identifier("x"))
                                                                                                                                                                       .add(identifier("y").multiply(identifier("y"))))))
                                                                                 .addStatement(identifier("strength").declareAs(identifier("d").subtract(Expression.literal(0.1))
                                                                                                                                               .divide(Expression.literal(0.5).subtract(Expression.literal(0.1)))))
                                                                                 .addStatement(identifier("socket").get(identifier("send"))
                                                                                                                   .invoke()
                                                                                                                   .addArgument(identifier("JSON").get(identifier("stringify"))
                                                                                                                                                  .invoke()
                                                                                                                                                  .addArgument(ObjectLiteral.create()
                                                                                                                                                                            .addEntry(identifier("angle"))
                                                                                                                                                                            .addEntry(identifier("strength")))))
                                                                                 .conclude(identifier("undefined"))))
                      .addStatement(identifier("window").get(identifier("onmousedown"))
                                                        .assign(Function.create()
                                                                        .addParameter(ObjectDestruction.create()
                                                                                                       .addEntry(Identifier.of("x"))
                                                                                                       .addEntry(Identifier.of("y")))
                                                                        .addStatement(identifier("moving").assign(literal(true)))
                                                                        .addStatement(invokeSendMovement)
                                                                        .conclude(identifier("undefined"))))
                      .addStatement(identifier("window").get(identifier("onmousemove"))
                                                        .assign(Function.create()
                                                                        .addParameter(ObjectDestruction.create()
                                                                                                       .addEntry(Identifier.of("x"))
                                                                                                       .addEntry(Identifier.of("y")))
                                                                        .addStatement(invokeSendMovement)
                                                                        .conclude(identifier("undefined"))))
                      .addStatement(identifier("window").get(identifier("onmouseup"))
                                                        .assign(identifier("window").get(identifier("onmouseleave"))
                                                                                    .assign(Function.create()
                                                                                                    .addStatement(identifier("moving").assign(literal(false)))
                                                                                                    .addStatement(identifier("angle").declareAs(literal(0)))
                                                                                                    .addStatement(identifier("strength").declareAs(literal(0)))
                                                                                                    .addStatement(identifier("socket").get(identifier("send"))
                                                                                                                                      .invoke()
                                                                                                                                      .addArgument(identifier("JSON").get(identifier("stringify"))
                                                                                                                                                                     .invoke()
                                                                                                                                                                     .addArgument(ObjectLiteral.create()
                                                                                                                                                                                               .addEntry(identifier("angle"))
                                                                                                                                                                                               .addEntry(identifier("strength")))))
                                                                                                    .conclude(identifier("undefined")))))
                      .addStatement(identifier("window").get(identifier("onmousewheel"))
                                                        .assign(Function.create()
                                                                        .addParameter(ObjectDestruction.create()
                                                                                                       .addEntry(identifier("deltaY")))
                                                                        .addStatement(identifier("socket").get(identifier("send"))
                                                                                                          .invoke()
                                                                                                          .addArgument(identifier("JSON").get(identifier("stringify"))
                                                                                                                                         .invoke()
                                                                                                                                         .addArgument(ObjectLiteral.create()
                                                                                                                                                                   .addEntry("zoom", identifier("deltaY").greaterThen(literal(0))))))
                                                                        .conclude(identifier("undefined"))))
                      .inputStream(0)
                      .transferTo(System.out);
    }
}
